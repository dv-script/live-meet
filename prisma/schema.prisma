generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                String              @id @default(uuid())
  email             String              @unique
  emailVerified     DateTime?
  name              String
  password          String
  role              Role                @default(USER)
  department        Department
  bookings          Booking[]
  meetings          Meeting[]
  verificationToken VerificationToken[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  Room              Room[]
}

model VerificationToken {
  id      String   @id @default(uuid())
  userId  String
  email   String
  token   String
  expires DateTime
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, email])
}

model Room {
  id             Int            @id @default(autoincrement())
  name           String         @unique
  location       Location
  capacity       Int
  availabilities Availability[]
  bookings       Booking[]
  meetings       Meeting[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  User           User?          @relation(fields: [userId], references: [id])
  userId         String?
}

model Booking {
  id        String   @id @default(uuid())
  userId    String
  roomId    Int
  startTime DateTime
  endTime   DateTime
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Meeting {
  id           String               @id @default(uuid())
  title        String
  description  String?
  startTime    DateTime
  endTime      DateTime
  ownerId      String
  roomId       Int
  owner        User                 @relation(fields: [ownerId], references: [id])
  room         Room                 @relation(fields: [roomId], references: [id])
  participants MeetingParticipant[]
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  @@unique([roomId, startTime, endTime])
}

model MeetingParticipant {
  id        Int     @id @default(autoincrement())
  meetingId String
  userId    String
  meeting   Meeting @relation(fields: [meetingId], references: [id])

  @@unique([meetingId, userId])
}

model Availability {
  id        Int      @id @default(autoincrement())
  startTime DateTime
  endTime   DateTime
  roomId    Int
  room      Room     @relation(fields: [roomId], references: [id])

  @@unique([roomId, startTime, endTime])
}

enum Department {
  COMERCIAL
  DIREITOS
  CONTEUDO
  ENTIDADES
  FINANCEIRO
  OPERACOES
  RH
  NEGOCIOS
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

enum Location {
  ANDAR1
  ANDAR2
  ANDAR3
  ANDAR4
  ANDAR5
}
