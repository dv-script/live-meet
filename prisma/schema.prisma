generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(uuid())
  email      String      @unique
  name       String
  password   String
  role       Role        @default(USER)
  department Departament
  bookings   Booking[]
  meetings   Meeting[]
}

model Room {
  id           Int            @id @default(autoincrement())
  name         String
  location     String
  capacity     Int
  Booking      Booking[]
  Meeting      Meeting[]
  Availability Availability[]
}

model Booking {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roomId    Int
  startTime DateTime
  endTime   DateTime
}

model Meeting {
  id           String               @id @default(uuid())
  title        String
  description  String?
  startTime    DateTime
  endTime      DateTime
  ownerId      String
  owner        User                 @relation(fields: [ownerId], references: [id])
  roomId       Int
  room         Room                 @relation(fields: [roomId], references: [id])
  participants MeetingParticipant[]
}

model MeetingParticipant {
  id        Int     @id @default(autoincrement())
  meetingId String
  userId    String
  meeting   Meeting @relation(fields: [meetingId], references: [id])

  @@unique([meetingId, userId])
}

model Availability {
  id        Int      @id @default(autoincrement())
  startTime DateTime
  endTime   DateTime
  roomId    Int

  room Room @relation(fields: [roomId], references: [id])

  @@unique([roomId, startTime, endTime])
}

enum Departament {
  COMERCIAL
  DIREITOS
  CONTEUDO
  ENTIDADES
  FINANCEIRO
  OPERACOES
  RH
  NEGOCIOS
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}
